/**
 * # stap -g --all-modules virtio_scsi.stp --remote=root@192.168.122.15
 */

%{
#include <linux/blkdev.h>
#include <linux/kdev_t.h>
%}

function print_array_len(addr:long, len:long) {
    i = 0
    for (i = 0; i < len; i++) {
        printf("0x%02x ", kernel_char(addr + i) & 0xff)
    }
    printf("\n")
}

function list_request:long (request:long) %{
   struct bio *bio;
   struct request *req = (struct request *)STAP_ARG_request;
   int bi_sector, bi_size;
   STAP_RETVALUE = 0;
   
   STAP_PRINTF("\trequest:%p sector:%d data_len:%d bio:%p biotail:%p\n",
               req, req->__sector, req->__data_len, req->bio, req->biotail);
   bio = req->bio;
   while (bio) {
       bi_sector = bio->bi_iter.bi_sector;
       bi_size = bio->bi_iter.bi_size;
       STAP_PRINTF("\t\tbio:%p bi_sector:%d bi_size:%d\n", bio, bi_sector, bi_size);
       STAP_RETVALUE++;
       if (bio == req->biotail){
           break;
       }
       bio = bio->bi_next;
   }
%}

probe begin {
    printf("begin probe virtio_scsi\n")
}

probe module("virtio_scsi").function("virtscsi_queuecommand") {
    printf("virtio_queuecommand scsi_cmnd:%p cmd_len:%d request:%p direction:%d\n\t",
           $sc, $sc->cmd_len, $sc->request, $sc->sc_data_direction)
    print_array_len($sc->cmnd, $sc->cmd_len)
    list_request($sc->request)
}
