{"root":{"data":{"id":"90a211251490","created":1493793580,"text":"qemu-kvm"},"children":[{"data":{"id":"bcqjekzbpx40","created":1494407946277,"text":"qemu调试"},"children":[{"data":{"id":"bcqjet1f7rk0","created":1494407963818,"text":"systemtap"},"children":[{"data":{"id":"bcqjf0gkkrs0","created":1494407979971,"text":"qemu的Tracing功能和systemtap用户空间代码静态探测点","note":"使用systemtap探查用户空间应用参考\n+ [⁠Chapter 4. User-space Probing\n](https://sourceware.org/systemtap/SystemTap_Beginners_Guide/userspace-probing.html)\n+ [4.5.8 Static userspace probing](https://sourceware.org/systemtap/langref/Probe_points.html#SECTION00055800000000000000)\n\nqemu的Tracing功能参考[tracing.txt](https://github.com/qemu/qemu/blob/master/docs/tracing.txt)\n\n## 1. qemu-kvm的trace-event\n\n### 1.1 backend\n安装对应版本qemu-kvm的src.rpm后，查看~/rpmbuild/SOURCES/build_configure.sh得知backend为dtrace，可使用systemtap检测预定义的探测点\n```\n# grep backend ~/rpmbuild/SOURCES/build_configure.sh\n    --enable-trace-backend=dtrace \\\n```\n\n### 1.2 trace-event\n在qemu的monitor中可查看所有的trace-event及当前状态，使用virsh qemu-monitor-command可和qemu的monitor交互\n+ 查看所有的trace-event\n```\n# virsh qemu-monitor-command testmigration --hmp info trace-events\n```\n+ 使用trace-event <event> on可开启该探测点，跟踪qemu-kvm的迁移功能\n```\n# virsh qemu-monitor-command testmigration --hmp trace-event 'migration_*' on\n# virsh qemu-monitor-command testmigration --hmp trace-event 'migrate_*' on\n```\n\n## 2. systemtap用户空间静态探测点\n\n+ 2.1 查看qemu-kvm进程支持的所有静态探测点\n```\n# stap -L 'process(\"/usr/libexec/qemu-kvm\").mark(\"*\")'\n```\n+ probe迁移相关的探测点\n```\nprobe process(\"/usr/libexec/qemu-kvm\").mark(\"migration*\"),\nprocess(\"/usr/libexec/qemu-kvm\").mark(\"migrate_*\") {\n    printf(\"%s\\n\", pn());\n}\n```\n\n\n"},"children":[]}]}]},{"data":{"id":"bckhmu9z9c00","created":1493793591465,"text":"命令行相关"},"children":[{"data":{"id":"bckhn0gm6co0","created":1493793604927,"text":"libvirt"},"children":[{"data":{"id":"bckhnafosi00","created":1493793626639,"text":"修改xml使用自己编译的qemu","note":"+ 编辑xml，修改emulator为自己编译的qemu\n\n```\n<emulator>/root/gitsrc/qemu/x86_64-softmmu/qemu-system-x86_64</emulator>\n```\n+ 修改/etc/libvirt/qemu.conf文件，设置user=root\n\n```\n# diff qemu.conf qemu.conf.bak\n240c240\n< user = \"root\"\n---\n> #user = \"root\"\n```\n+ 重启libvirtd服务\n\n```\n# systemctl restart libvirtd.service\n```\n+ 关闭selinux\n\n```\n# setenforce 0\n```"},"children":[]},{"data":{"id":"bclcl3ov5tc0","created":1493880909635,"text":"xml转qemu命令行","note":"virsh domxml-to-native qemu-argv centos7.xml"},"children":[]}]},{"data":{"id":"bclfg9wdh9c0","created":1493888994659,"text":"qemu命令行"},"children":[{"data":{"id":"bclfgcvnp0o0","created":1493889001146,"text":"nographic模式","note":"1. 修改grub，添加console=ttyS0。修改/etc/default/grub文件，在GRUB_CMDLINE_LINUX中添加console=ttyS0，在centos中执行grub2-mkconfig -o /boot/grub2/grub.cfg更新grub，在ubuntu中执行update-grub。\n2. qemu命令行添加-nographic -serial stdio参数"},"children":[]}]}]},{"data":{"id":"bclcohz3qf40","created":1493881175822,"text":"配置"},"children":[{"data":{"id":"bclconahf200","created":1493881187394,"text":"CPU配置"},"children":[{"data":{"id":"bclcoppx06w0","created":1493881192681,"text":"cpu cache"},"children":[{"data":{"id":"bclzz1rjx3s0","created":1493946888071,"text":"禁用l3-cache","note":"```\nLC_ALL=C PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin \\\n    /root/qemu-kvm/qemu-2.9.0/x86_64-softmmu/qemu-system-x86_64 \\\n    -name guest=centos7qemu2.6,debug-threads=on \\\n    -machine pc-i440fx-2.9,accel=kvm,usb=off \\\n    -cpu host,host-cache-info=off,l3-cache=off \\\n    -m 1024 \\\n    -realtime mlock=off \\\n    -smp 4 \\\n    -uuid 8c230ad1-1f0c-490c-a474-1f110959b766 \\\n    -no-user-config \\\n    -nodefaults \\\n    -rtc base=utc,driftfix=slew \\\n    -global kvm-pit.lost_tick_policy=discard \\\n    -no-hpet \\\n    -no-shutdown \\\n    -global PIIX4_PM.disable_s3=1 \\\n    -global PIIX4_PM.disable_s4=1 \\\n    -boot strict=on \\\n    -drive file=/data/sriovInstances/qemu-images/centos7qemu26.qcow2,format=qcow2,if=none,id=drive-virtio-disk0 \\\n    -device virtio-blk-pci,scsi=off,bus=pci.0,addr=0x7,drive=drive-virtio-disk0,id=virtio-disk0,bootindex=1 \\\n    -device virtio-balloon-pci,id=balloon0,bus=pci.0,addr=0x8 \\\n    -nographic \\\n    -serial stdio \\\n    -msg timestamp=on\n```\n"},"children":[]},{"data":{"id":"bcm6uob9v4w0","created":1493966293101,"text":"emulate l3-cache","note":"```\nLC_ALL=C PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin \\\n    /root/qemu-kvm/qemu-2.9.0/x86_64-softmmu/qemu-system-x86_64 \\\n    -name guest=centos7qemu2.6,debug-threads=on \\\n    -machine pc-i440fx-2.9,accel=kvm,usb=off \\\n    -cpu host,l3-cache=on,host-cache-info=off \\\n    -m 1024 \\\n    -realtime mlock=off \\\n    -smp 4 \\\n    -uuid 8c230ad1-1f0c-490c-a474-1f110959b766 \\\n    -no-user-config \\\n    -nodefaults \\\n    -rtc base=utc,driftfix=slew \\\n    -global kvm-pit.lost_tick_policy=discard \\\n    -no-hpet \\\n    -no-shutdown \\\n    -global PIIX4_PM.disable_s3=1 \\\n    -global PIIX4_PM.disable_s4=1 \\\n    -boot strict=on \\\n    -drive file=/data/sriovInstances/qemu-images/centos7qemu26.qcow2,format=qcow2,if=none,id=drive-virtio-disk0 \\\n    -device virtio-blk-pci,scsi=off,bus=pci.0,addr=0x7,drive=drive-virtio-disk0,id=virtio-disk0,bootindex=1 \\\n    -device virtio-balloon-pci,id=balloon0,bus=pci.0,addr=0x8 \\\n    -nographic \\\n    -serial stdio \\\n    -msg timestamp=on\n```"},"children":[]},{"data":{"id":"bcm6v58vb1c0","created":1493966329961,"text":"cpu cache passthrough","note":"```\nLC_ALL=C PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin \\\n    /root/qemu-kvm/qemu-2.9.0/x86_64-softmmu/qemu-system-x86_64 \\\n    -name guest=centos7qemu2.6,debug-threads=on \\\n    -machine pc-i440fx-2.9,accel=kvm,usb=off \\\n    -cpu host,host-cache-info=on,l3-cache=off \\\n    -m 1024 \\\n    -realtime mlock=off \\\n    -smp 4 \\\n    -uuid 8c230ad1-1f0c-490c-a474-1f110959b766 \\\n    -no-user-config \\\n    -nodefaults \\\n    -rtc base=utc,driftfix=slew \\\n    -global kvm-pit.lost_tick_policy=discard \\\n    -no-hpet \\\n    -no-shutdown \\\n    -global PIIX4_PM.disable_s3=1 \\\n    -global PIIX4_PM.disable_s4=1 \\\n    -boot strict=on \\\n    -drive file=/data/sriovInstances/qemu-images/centos7qemu26.qcow2,format=qcow2,if=none,id=drive-virtio-disk0 \\\n    -device virtio-blk-pci,scsi=off,bus=pci.0,addr=0x7,drive=drive-virtio-disk0,id=virtio-disk0,bootindex=1 \\\n    -device virtio-balloon-pci,id=balloon0,bus=pci.0,addr=0x8 \\\n    -nographic \\\n    -serial stdio \\\n    -msg timestamp=on\n```"},"children":[]}]}]},{"data":{"id":"bcpeo4g21og0","created":1494293028419,"text":"内存配置"},"children":[{"data":{"id":"bcpeo89kpqg0","created":1494293036734,"text":"hugepages","note":"参考[How to set up KVM guests to use HugePages?](https://access.redhat.com/solutions/36741)\n+ 在宿主机中挂载HugeTLB文件系统\n```\nmkdir -p /hugepages\nmount -t hugetlbfs hugetlbfs /hugepages\n```\nCentos 7默认已经挂载\n```\n# mount | grep huge\ncgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,relatime,seclabel)\n```\n+ 查看/proc/meminfo可发现hugepages的使用情况\n```\n# cat /proc/meminfo | grep Huge\nAnonHugePages:     94208 kB\nHugePages_Total:       0\nHugePages_Free:        0\nHugePages_Rsvd:        0\nHugePages_Surp:        0\nHugepagesize:       2048 kB\n```\n使用sysctl可查看vm.nr_hugepages的值，对应的是/proc/sys/vm/nr_hugepages\n```\n# sysctl vm.nr_hugepages\nvm.nr_hugepages = 0\n```\n+ 设置vm.nr_hugepages\n```\n# sysctl vm.nr_hugepages=1024\nvm.nr_hugepages = 1024\n# cat /proc/meminfo | grep Huge\nAnonHugePages:     94208 kB\nHugePages_Total:    1024\nHugePages_Free:     1024\nHugePages_Rsvd:        0\nHugePages_Surp:        0\nHugepagesize:       2048 kB\n```\n+ 修改XML文件，添加\n```\n<memoryBacking>\n  <hugepages/>\n</memoryBacking>\n```\n+ 启动对应虚拟机，在qemu参数中可看到-mem-path /dev/hugepages/libvirt/qemu项，查看HugePages的使用情况\n```\n# cat /proc/meminfo | grep Huge\nAnonHugePages:    118784 kB\nHugePages_Total:    1024\nHugePages_Free:      512\nHugePages_Rsvd:        0\nHugePages_Surp:        0\nHugepagesize:       2048 kB\n```\n\n\n\n"},"children":[]}]}]},{"data":{"id":"bcmae7vysz40","created":1493976287960,"text":"qemu-kvm代码"},"children":[{"data":{"id":"bcmaebyiqzk0","created":1493976296821,"text":"VM Exit","note":"## 1. kvm中vmx退出\n\n### 1.1 退出函数\n在vmx_vcpu_run函数中进入VMX，当退出时通过vmcs_read32(VM_EXIT_REASON)获取vmcs中的VM_EXIT_REASON Region获取退出原因，原因说明在Intel手册卷三的\"APPENDIX C VMX BASIC EXIT REASONS\"中有说明，对应的定义在\"arch/x86/include/uapi/asm/vmx.h\"中，如\n```c\n#define EXIT_REASON_CPUID               10\n```\n\n### 1.2 退出原因\n退出的回调执行函数在arch/x86/kvm/vmx.c的kvm_vmx_exit_handlers中定义，如\n```c\n[EXIT_REASON_CPUID]                   = handle_cpuid,\n```\n当宿主机执行cpuid指令退出时，host端kvm响应程序为handle_cpuid。\n"},"children":[]},{"data":{"id":"bcojv6vkjlc0","created":1494206127852,"text":"CPU相关","note":"X86下使用CPUID指令获取CPU的identification和feature信息。使用EAX寄存器传入参数，使用EAX、EBX、ECX和EDX寄存器获取返回信息。参考Intel手册卷二 《INSTRUCTION SET REFERENCE, A-L CPUID—CPU Identification》"},"children":[{"data":{"id":"bcojv9xz6u80","created":1494206134528,"text":"CPU Cache","note":"## 1. CPUID指令描述\n使用CPUID指令\n+ 当eax为02H时可通过查表获取CPU和TLB信息，参考表\"Table 3-12. Encoding of CPUID Leaf 2 Descriptors\"\n```\nINPUT EAX = 02H: TLB/Cache/Prefetch Information Returned in EAX, EBX, ECX, EDX\n```\n+ 当eax为04H时，可计算CPU的Cache信息\n```\nINPUT EAX = 04H: Returns Deterministic Cache Parameters for Each Level\n```\n\n## 2. perf查看qemu-kvm的CPU Cache功能\n虚拟机使用CPUID指令获取CPU的信息，kvm会退出，退出原因为EXIT_REASON_CPUID，对应响应函数为\n```c\n[EXIT_REASON_CPUID]                   = handle_cpuid,\n```\n在arch/x86/kvm/cpuid.c的kvm_cpuid函数中，调用trace_kvm_cpuid函数，可使用perf record探测kvm事件。\n```\n# perf record -a -e kvm:kvm_cpuid\n```\n\n### 2.1 模拟l3-cache\n当qemu-kvm的命令行的CPU参数为\n```\n-cpu host,l3-cache=on,host-cache-info=off\n```\n使用perf report结果的前几行为\n```\n    95.38%  func 0 rax d rbx 756e6547 rcx 6c65746e rdx 49656e69\n     2.47%  func 1 rax 306e4 rbx 800 rcx ffba2203 rdx f8bfbff\n     1.30%  func 80000001 rax 306e4 rbx 0 rcx 1 rdx 2c100800\n     0.12%  func 2 rax 1 rbx 0 rcx 4d rdx 2c307d\n     0.10%  func 1 rax 306e4 rbx 800 rcx f7ba2203 rdx f8bfbff\n     0.10%  func 1 rax 306e4 rbx 1000800 rcx ffba2203 rdx f8bfbff\n     0.09%  func 1 rax 306e4 rbx 2000800 rcx ffba2203 rdx f8bfbff\n     0.08%  func 7 rax 0 rbx 283 rcx 0 rdx 0\n     0.06%  func 4 rax 121 rbx 1c0003f rcx 3f rdx 1\n     0.06%  func 4 rax 122 rbx 1c0003f rcx 3f rdx 1\n     0.06%  func 4 rax 143 rbx 3c0003f rcx fff rdx 1\n     0.06%  func 4 rax 163 rbx 3c0003f rcx 3fff rdx 6\n```\n+ \"func 2 rax 1 rbx 0 rcx 4d rdx 2c307d\"含义执行CPUID时EAX为2，可通过查表的方式根据EAX、EBX、ECX、EDX的值获取CPU的Cache和TLB信息。\n```\n4DH Cache 3rd-level cache: 16MByte, 16-way set associative, 64 byte line size\n2CH Cache 1st-level data cache: 32 KBytes, 8-way set associative, 64 byte line size\n30H Cache 1st-level instruction cache: 32 KBytes, 8-way set associative, 64 byte line size\n7DH Cache 2nd-level cache: 2 MByte, 8-way set associative, 64byte line size\n```\n+ \"func 4\"表明执行CPUID时EAX为4，可通过公式计算CPU Cache\n```\nThis Cache Size in Bytes\n= (Ways + 1) * (Partitions + 1) * (Line_Size + 1) * (Sets + 1)\n= (EBX[31:22] + 1) * (EBX[21:12] + 1) * (EBX[11:0] + 1) * (ECX + 1)\n```\nEAX的低四位代表Cache类型\n```\nEAX Bits 04 - 00: Cache Type Field.\n  0 = Null - No more caches.\n  1 = Data Cache.\n  2 = Instruction Cache.\n  3 = Unified Cache.\n  4-31 = Reserved\nBits 07 - 05: Cache Level (starts at 1).\n```\n+ \"func 4 rax 121 rbx 1c0003f rcx 3f rdx 1\"，bits[0-4]为1表示为Data Cache，bits[5-7]值为1表示为level 1。通过EBX和ECX计算Cache，对应Cache=(0x7+1)*(0x0+1)*(0x3f+1)*(0x3f+1)=32768，为32K。总体含义为L1d cache为32K。\n+ \"func 4 rax 122 rbx 1c0003f rcx 3f rdx 1\"，bits[0-4]=2表示为Instruction Cache，bits[5-7]=1表示为level 1，Cache=(0x7+1)*(0x0+1)*(0x3f+1)*(0x3f+1)=32768，含义为L1i cache为32K。\n+ \"func 4 rax 143 rbx 3c0003f rcx fff rdx 1\"，bits[0-4]=3表示为Unified Cache，bits[5-7]=2表示为level 2，Cache = (0xf+1)*(0x0+1)*(0x3f+1)*(0xfff+1)=4194304，总体含义L2 cache为4096K。\n+ \"func 4 rax 163 rbx 3c0003f rcx 3fff rdx 6\"，bits[0-4]=3表示为Unified Cache，bits[5-7]=3表示为level 3，Cache = (0xf+1)*(0x0+1)*(0x3f+1)*(0x3fff+1) = 16777216，总体含义L3 cache为16384K。\n\n\n\n\n"},"children":[]}]},{"data":{"id":"bcpenwhfxgw0","created":1494293011088,"text":"内存相关"},"children":[{"data":{"id":"bcpl62gyr8g0","created":1494311361334,"text":"hugepages","note":"+ qemu命令行使用-mem-path /dev/hugepages/libvirt/qemu使用大页内存，hugetlbfs文件通过mmap的方式使用，对应内核中的hugetlbfs_file_mmap函数，使用systemtap定位用户态的位置\n```\nprobe kernel.function(\"hugetlbfs_file_mmap\") {\n  printf(\"%s\\n\", ppfunc());\n  print_ubacktrace();\n}\n```\n打印为\n```\nhugetlbfs_file_mmap\n 0x7f739dce9a0b : mmap64+0x7b/0x150 [/usr/lib64/libtcmalloc.so.4.2.6]\n 0x7f73a7628dd0 : qemu_ram_mmap+0xb0/0x180 [/usr/libexec/qemu-kvm]\n 0x7f73a736ac30 : qemu_ram_alloc_from_file+0x2d0/0x450 [/usr/libexec/qemu-kvm]\n 0x7f73a73a9748 : memory_region_init_ram_from_file+0x48/0x70 [/usr/libexec/qemu-kvm]\n 0x7f73a739feaf : memory_region_allocate_system_memory+0x12f/0x1f0 [/usr/libexec/qemu-kvm]\n 0x7f73a73ecb97 : pc_memory_init+0xc7/0x820 [/usr/libexec/qemu-kvm]\n 0x7f73a73eefd3 : pc_init1.constprop.1+0x603/0x840 [/usr/libexec/qemu-kvm]\n 0x7f73a7361bc5 : main+0x1185/0x50a0 [/usr/libexec/qemu-kvm]\n 0x7f739cacab35 : __libc_start_main+0xf5/0x1c0 [/usr/lib64/libc-2.17.so]\n 0x7f73a7366e3c : _start+0x29/0x2d [/usr/libexec/qemu-kvm]\n```\n+ 在pc_memory_init中进入memory_region_allocate_system_memory申请内存，非numa进入allocate_system_memory_nonnuma==>memory_region_init_ram_from_file==>qemu_ram_alloc_from_file==>file_ram_alloc\n+ 在file_ram_alloc函数中首先使用g_strdup_printf创建filename，使用mkstemp创建并打开文件，打开成功后unlink(filename)，通过qemu_fd_getpagesize获取page_size。\n+ qemu_ram_mmap传入align为获取到的page_size。\n+ 使用trace-cmd record -p function -l  hugetlb_fault可统计hugetlb_fault的触发次数。\n\n\n"},"children":[]}]}]}]},"template":"right","theme":"fresh-blue","version":"1.4.41"}